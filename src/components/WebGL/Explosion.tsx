/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 explosion.glb -t -d -s 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import {
  useGLTF,
  useAnimations,
  shaderMaterial,
} from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { extend, useFrame } from "@react-three/fiber";
import { generic2DNoise } from "@/utils/glsl";

type GLTFResult = GLTF & {
  nodes: {
    Sphere: THREE.Mesh;
  };
  materials: {};
};

export const ExplosionMaterial = shaderMaterial(
  {
    time: 0,
  },
  ` varying vec2 vUv;
    uniform float time;

    ${generic2DNoise}
    void main() {
      vUv = uv;

      float noiseSample = noise(vUv * 10.0 + time * 5.);

      vec3 pos = position;
      pos.x += noiseSample * 0.5;
      pos.y += noiseSample * 0.5;
      pos.z += noiseSample * 0.5;


      vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );


      gl_Position = projectionMatrix * viewMatrix * worldPosition;
    }`,
  ` varying vec2 vUv;
   
    void main() {
      vec2 uv = vUv;
     

      gl_FragColor = vec4(1.0, 1.0, 1.0, 0.0);
      #include <tonemapping_fragment>
      #include <encodings_fragment>
    }`,
);

extend({ ExplosionMaterial });

export function Explosion(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null!);
  const sphere = useRef<THREE.Mesh>(null!);
  const { nodes, materials, animations } = useGLTF(
    "./models/explosion.glb",
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  function playAnimation() {
    const action = actions[
      "SphereAction.001"
    ] as THREE.AnimationAction;
    action.reset();
    action.play();
  }

  React.useEffect(() => {
    playAnimation();
  }, []);

  useFrame(({ clock }) => {
    const time = clock.getElapsedTime();
    const material = sphere.current.material as THREE.ShaderMaterial;
    material.uniforms.time.value = time;
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" position={[0, -1, 0]}>
        <mesh
          ref={sphere}
          name="Sphere"
          castShadow
          receiveShadow
          geometry={nodes.Sphere.geometry}
          position={[0, -0.326, 0]}
          scale={[0.093, 1, 0.093]}
          key={Math.random()}
        >
          {/* @ts-ignore */}
          <explosionMaterial />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("./models/explosion.glb");
